pop cx
int 0x80
iret
clc
cmc
stc
cld
std
cli
sti
movsb
movsw
jmp(word) 0x1000:0xFFFF
call(word) 0x1000:0xFFFF
or ax [0xDEAD]
and ah cl
not cl
neg dl
sbb ax [si+0x1234]
aaa
daa
push(seg) ss
pop(seg) ds
pop(seg) ss
pop(seg) es
add_al 0xFFFF
adc_ax 0x1234
mov [0x1234] dx
mov cx ax
movi byte [bx+si] 0x22
movi byte word [0x1234] 0x1234
cli
hlt
xor_al 0x1234
or_al 64
test_ax 512
add byte [0x1234] al
jz $
js $
jl $
cmp ax dx
cmp [bx+si+0x1234] 
mul dl 
mul word [bx+si+0x1234]
imul word [bx+si+0x1234]
not [0x1234]
test word [bx+si-0xFFFF] 0x1234
mov [si] ax
mov ax [si]